Input Validation,The product does not validate or incorrectly validates input data,"The technical impact of this vulnerability is that it can lead to various attacks such as buffer overflow, SQL injection, and cross-site scripting (XSS) attacks.","The security properties affected by this vulnerability are confidentiality, integrity, and availability.",The severity of this vulnerability is high as it can lead to various attacks that can compromise the security of the system.,The likelihood of this vulnerability being exploited is high as attackers can easily identify and exploit this vulnerability.,The relevant assets affected by this vulnerability are the system and the data stored in it.,The attack vector for this vulnerability is through the input fields of the product.,"The attacker types for this vulnerability are hackers, malicious insiders, and script kiddies.","The attacker motives for exploiting this vulnerability are financial gain, stealing sensitive information, and causing disruption.","The relevant cyber controls/countermeasures for this vulnerability are implementing input validation checks, using parameterized queries, and using web application firewalls (WAFs).",The detection methods for this vulnerability are using automated tools to scan for vulnerabilities and conducting manual code reviews to identify input validation issues.,20
The vulnerability is that the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.,The method used is constructing a pathname using external input.,"The technical impact is that an attacker can access files or directories outside of the restricted parent directory, potentially leading to unauthorized access, modification, or deletion of sensitive data.","The security properties affected are confidentiality, integrity, and availability.",The severity of this threat is high.,"The likelihood of this threat is also high, as it is a common vulnerability that can be easily exploited.",The relevant assets are files and directories located underneath the restricted parent directory.,The attack vector is through the construction of a pathname using external input.,The attacker type is anyone with access to the product and knowledge of the vulnerability.,The attacker motive is to gain unauthorized access to sensitive data.,"The relevant cyber controls/countermeasures include input validation and sanitization, as well as proper access controls and permissions.",Detection methods include monitoring for unusual file access patterns and unauthorized access attempts.,22
Command Injection,Constructing a command using externally-influenced input without proper sanitization,Execution of unintended commands or code on a downstream component,"Confidentiality, Integrity, Availability",High,High,Any system or application that accepts user input to construct commands,"Input fields, APIs, network protocols","External attackers, insiders","Gain unauthorized access, steal data, disrupt operations","Input validation and sanitization, command whitelisting, least privilege access control","Log analysis, anomaly detection, intrusion detection systems",77
Command Injection,The product constructs an OS command using externally-influenced input without proper validation or sanitization.,An attacker can execute arbitrary commands on the system with the privileges of the application or user running the command.,"Confidentiality, Integrity, Availability",High,Likely,The system running the vulnerable application.,"Input fields, parameters, or arguments that are used to construct OS commands.","External attackers, insiders, or anyone who can interact with the application.","Gain unauthorized access, steal data, disrupt operations, or cause damage.","Input validation and sanitization, using parameterized queries, and limiting privileges of the application or user running the command.",Monitoring system logs for suspicious commands or unexpected behavior.,78
Failure to neutralize user-controllable input,Incorrectly placing user input in web page output,Execution of malicious code on other users' browsers,"Confidentiality, integrity, availability",High,Likely,"Web application, user data","Input fields, cookies, HTTP headers","External attackers, malicious insiders","Data theft, website defacement, financial gain","Input validation, output encoding, secure coding practices","Web application firewalls, code review, penetration testing",79
SQL Injection,Constructing SQL commands using externally-influenced input without proper sanitization,"Unauthorized access to sensitive data, modification or deletion of data, and potentially complete compromise of the system","Confidentiality, integrity, and availability",High,Likely,Databases and applications that use SQL,"Input fields, cookies, HTTP headers, and other user-controlled data sources","External attackers, insiders, and automated bots","Stealing sensitive data, modifying or deleting data, and disrupting business operations","Input validation and sanitization, parameterized queries, stored procedures, and least privilege access controls","Log analysis, intrusion detection systems, and vulnerability scanners",89
The vulnerability is that the product does not properly neutralize special elements in externally-influenced input that could modify the syntax or behavior of the intended code segment.,The method used is constructing all or part of a code segment using externally-influenced input from an upstream component.,"The technical impact is that the product may execute unintended code or behave in unexpected ways, potentially leading to data loss, system compromise, or other security breaches.","The security properties affected are confidentiality, integrity, and availability.",The severity of this threat is high.,"The likelihood of this threat is also high, as it is a common mistake in software development.",The relevant assets are any systems or data that could be impacted by the unintended code execution or unexpected behavior.,The attack vector is through the externally-influenced input from an upstream component.,"The attacker type could be anyone with the ability to provide the externally-influenced input, such as a user or a malicious actor.","The attacker's motive could be to gain unauthorized access to sensitive data, disrupt system operations, or cause other harm.","The relevant cyber controls/countermeasures include input validation, output encoding, and secure coding practices.","Detection methods include code review, static analysis, and dynamic analysis.",94
Buffer Overflow,The product reads from or writes to a memory location outside of the intended boundary of the buffer.,"The technical impact of this vulnerability is that it can cause the product to crash, execute arbitrary code, or allow an attacker to gain control of the system.","The security properties affected by this vulnerability are confidentiality, integrity, and availability.",The severity of this vulnerability is high.,The likelihood of this vulnerability being exploited is high.,The relevant assets for this vulnerability are any systems or applications that use the product.,The attack vector for this vulnerability is through the product's input/output operations.,"The attacker types for this vulnerability are hackers, malicious insiders, and anyone with access to the product.","The attacker motives for this vulnerability are to gain unauthorized access to sensitive information, disrupt operations, or cause damage to the system.","The relevant cyber controls/countermeasures for this vulnerability are input validation, boundary checking, and memory protection mechanisms.","The detection methods for this vulnerability are through code review, penetration testing, and monitoring for abnormal system behavior.",119
Buffer overflow,Reading data past the end or before the beginning of a buffer,"Memory corruption, execution of arbitrary code, denial of service","Confidentiality, integrity, availability",High,High,"Software applications, systems, and devices","Input validation, boundary checking, and memory allocation","Malicious actors, hackers, and insiders","Stealing sensitive data, gaining unauthorized access, disrupting operations","Input validation, boundary checking, and memory protection mechanisms","Static and dynamic analysis, code review, and penetration testing",125
Integer overflow or wraparound,Performing a calculation that assumes the resulting value will always be larger than the original value,Can introduce other weaknesses when the calculation is used for resource management or execution control,Integrity and availability,High,High,Any system that performs calculations,Input validation and boundary checking,Malicious actors with knowledge of the system and its vulnerabilities,"Gain unauthorized access, disrupt operations, or steal sensitive information","Input validation and boundary checking, secure coding practices, and regular software updates","Code review, testing, and monitoring for unexpected behavior",190
Improper file permission settings during installation,"During installation, file permissions are set to allow anyone to modify those files","Attackers can modify the installed files, potentially leading to unauthorized access, data loss, or system compromise","Confidentiality, integrity, and availability",High,High,Installed software and associated data,Local or remote access to the system during installation,"Malicious insiders, external attackers, or attackers with access to the installation process","To gain unauthorized access, steal data, or compromise the system","Implementing the principle of least privilege, using secure installation procedures, and regularly reviewing file permissions","Monitoring file permissions and access logs, and using intrusion detection systems to detect unauthorized modifications",276
Insufficient identity verification,Actor claims to have a given identity without proper verification,Unauthorized access to sensitive information or resources,Authentication and authorization,High,High,Sensitive information or resources,"Social engineering, phishing, or other forms of impersonation",External attackers or insiders with malicious intent,"Financial gain, espionage, or sabotage","Multi-factor authentication, identity verification processes, and access controls",Monitoring for unusual access patterns or attempts to access sensitive information or resources without proper authentication,287
The vulnerability is the lack of authentication for functionality that requires a provable user identity or consumes a significant amount of resources.,The method used by attackers is to exploit the lack of authentication to gain access to functionality or resources that they should not have access to.,"The technical impact of this vulnerability is that attackers can perform actions or consume resources that they should not be able to, potentially leading to data theft, data corruption, or denial of service.","The security properties affected by this vulnerability are confidentiality, integrity, and availability.",The severity of this vulnerability is high.,"The likelihood of this vulnerability being exploited is also high, as attackers are always looking for ways to gain unauthorized access to systems.",The relevant assets that are at risk are any resources that require authentication to access or consume.,The attack vector for this vulnerability is through any functionality that requires authentication.,"The attacker types that are likely to exploit this vulnerability are hackers, insiders, and anyone with malicious intent.","The attacker motives for exploiting this vulnerability could be financial gain, data theft, or sabotage.","The relevant cyber controls/countermeasures for this vulnerability are implementing strong authentication mechanisms, limiting access to resources, and monitoring for unauthorized access.","Detection methods for this vulnerability include monitoring for unusual activity or resource consumption, and implementing logging and auditing mechanisms.",306
Insufficient Verification of Data Authenticity,The web application fails to properly verify whether a request was intentionally provided by the user who submitted it.,"An attacker can submit a request that appears to be valid and consistent, but actually contains malicious code or data. This can lead to a variety of attacks, including injection attacks, cross-site scripting (XSS), and cross-site request forgery (CSRF).","Confidentiality, Integrity, Availability",High,High,Web applications that accept user input,Web requests,"External attackers, insiders","Financial gain, data theft, sabotage, espionage","Input validation, output encoding, session management, CSRF tokens","Log analysis, anomaly detection, intrusion detection systems (IDS)",352
Concurrent access to a shared resource without proper synchronization,"The code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.","The technical impact of this vulnerability is that it can lead to race conditions, data corruption, and other unexpected behavior that can compromise the integrity and availability of the system.","The security properties affected by this vulnerability are confidentiality, integrity, and availability.",The severity of this vulnerability is high.,The likelihood of this vulnerability being exploited is high.,The relevant assets for this vulnerability are any shared resources that are accessed concurrently by multiple code sequences.,The attack vector for this vulnerability is through the shared resource that is being accessed concurrently.,The attacker type for this vulnerability is any attacker who has access to the shared resource and can exploit the timing window to modify it.,The attacker motive for this vulnerability is to gain unauthorized access to the shared resource or to disrupt the system by causing unexpected behavior.,"The relevant cyber controls/countermeasures for this vulnerability are proper synchronization mechanisms, such as locks, semaphores, and monitors, to ensure exclusive access to the shared resource.",The detection methods for this vulnerability are through code review and testing to identify potential race conditions and other unexpected behavior that can result from concurrent access to shared resources.,362
The vulnerability is the lack of proper control over the allocation and maintenance of a limited resource.,"The attacker can influence the amount of resources consumed, eventually leading to the exhaustion of available resources.","The technical impact is the exhaustion of available resources, which can cause denial of service or system crashes.","The security properties affected are availability and possibly integrity, as the exhaustion of resources can cause system instability.","The severity of this threat is high, as it can cause denial of service or system crashes.",The likelihood of this threat depends on the specific implementation of the product and the availability of the limited resource. It can range from low to high.,The relevant assets are the limited resource and the system or service that depends on it.,The attack vector is through the manipulation of the limited resource allocation and maintenance.,The attacker can be anyone with access to the product and knowledge of the limited resource.,"The attacker's motive can be to disrupt the availability of the system or service, or to gain an advantage over other users.","The relevant cyber controls/countermeasures include proper resource allocation and maintenance, monitoring of resource usage, and limiting access to the limited resource.","Detection methods include monitoring of resource usage and system performance, and detecting abnormal resource consumption patterns.",400
Referencing memory after it has been freed,Accessing memory that has already been released,"Program crashes, unexpected values, or execution of code","Confidentiality, Integrity, Availability",High,High,Software applications,"Malicious code injection, buffer overflow, heap spraying","Hackers, insiders","Financial gain, espionage, sabotage","Input validation, memory management techniques, code reviews, vulnerability scanning","Memory monitoring, log analysis, anomaly detection",416
File upload vulnerability,Uploading or transferring files of dangerous types,"Execution of malicious code, denial of service, data leakage, or privilege escalation","Confidentiality, integrity, and availability",High,High,Product's environment and data stored within it,Web interface or API,External attackers or malicious insiders,"Data theft, sabotage, or espionage","Implementing file type validation, restricting file upload permissions, and implementing file scanning and filtering",Monitoring file upload activity and implementing intrusion detection systems,434
NULL pointer dereference,Dereferencing a pointer that is expected to be valid but is NULL,Application crash or exit,Availability,High,High,Applications that use pointers,Input validation,"Malicious users, attackers","Disruption, denial of service","Input validation, exception handling, defensive programming","Application logs, system logs, error messages",476
Deserialization of untrusted data without proper validation,The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.,The technical impact of this vulnerability is that an attacker can execute arbitrary code or cause a denial of service (DoS) attack.,"The security properties affected by this vulnerability are confidentiality, integrity, and availability.",The severity of this vulnerability is high.,The likelihood of this vulnerability being exploited is high.,The relevant assets for this vulnerability are any systems or applications that deserialize untrusted data.,"['An attacker can send malicious data to the application through a network connection or by uploading a file.', 'An attacker can modify the data in transit to exploit the vulnerability.']",['The attacker can be anyone with network access to the vulnerable system or application.'],"[""The attacker's motive can be to gain unauthorized access to the system or application, steal sensitive data, or cause a DoS attack.""]","['The relevant cyber controls to mitigate this vulnerability are input validation, data sanitization, and using a secure serialization library.']","['The detection methods for this vulnerability include monitoring for unexpected or malicious behavior in the system or application, and using intrusion detection systems (IDS) or intrusion prevention systems (IPS).']",502
XML External Entity (XXE) Injection,The attacker injects an XML entity with a URI that resolves to a document outside of the intended sphere of control.,"The product embeds incorrect documents into its output, which can lead to various consequences such as information disclosure, denial of service, or remote code execution.","Confidentiality, integrity, and availability.",High,High,Any system that processes XML documents.,The attacker can exploit this vulnerability by sending a specially crafted XML document to the product.,External attackers or insiders with access to the system that processes XML documents.,"Information theft, sabotage, or financial gain.","Input validation and sanitization, disabling external entity resolution, and using secure XML parsers.","Monitoring for unexpected network traffic, analyzing system logs for suspicious activity, and using vulnerability scanners to identify vulnerable systems.",611
Buffer overflow,The product writes data beyond the intended buffer boundaries,"Memory corruption, execution of arbitrary code, denial of service","Confidentiality, integrity, availability",High,High,Any system or application that uses buffers to store data,"Input validation failure, insufficient bounds checking","Malicious actors, hackers, insiders","Data theft, system compromise, disruption of service","Input validation, bounds checking, stack canaries, address space layout randomization (ASLR), non-executable stack","Static analysis, dynamic analysis, fuzz testing",787
Hard-coded credentials,"The product uses hard-coded credentials for authentication, communication, or encryption","Attackers can easily obtain the hard-coded credentials and use them to gain unauthorized access to the system, intercept communication, or decrypt internal data","Confidentiality, integrity, and availability",High,High,"Authentication credentials, communication channels, and sensitive data","Network-based attacks, social engineering, and reverse engineering",External attackers and insiders,"Financial gain, espionage, or sabotage","Avoid hard-coding credentials, use secure storage and transmission mechanisms, implement access controls, and monitor for unauthorized access","Log analysis, network traffic analysis, and vulnerability scanning",798
The vulnerability is the lack of authorization check when an actor attempts to access a resource or perform an action.,The method used by the attacker is to exploit the lack of authorization check to gain unauthorized access to resources or perform unauthorized actions.,"The technical impact of this threat is that an attacker can gain access to sensitive information or perform unauthorized actions, potentially leading to data loss, system compromise, or other security breaches.","The security properties affected by this threat are confidentiality, integrity, and availability.","The severity of this threat is high, as it can lead to significant security breaches and data loss.","The likelihood of this threat is also high, as many products and systems are vulnerable to this type of attack.",The relevant assets for this threat are any resources or actions that require authorization to access or perform.,"The attack vector for this threat is through the lack of authorization check, which can be exploited through various means such as SQL injection, cross-site scripting, or other vulnerabilities.","The attacker type for this threat can be anyone with malicious intent, including insiders, external attackers, or automated bots.","The attacker's motive for this threat is to gain unauthorized access to sensitive information or perform unauthorized actions for financial gain, espionage, or other malicious purposes.","The relevant cyber controls and countermeasures for this threat include implementing proper authorization checks, access controls, and monitoring systems for suspicious activity.","Detection methods for this threat include monitoring access logs, implementing intrusion detection systems, and conducting regular security audits.",862
The vulnerability is that the web server does not sufficiently ensure that the request is being sent to the expected destination.,The method used is that the web server retrieves the contents of a URL or similar request from an upstream component without proper verification.,"The technical impact is that an attacker can send a request to the web server that appears to be from a trusted source, but actually contains malicious content. This can lead to various attacks such as cross-site scripting (XSS), SQL injection, and remote code execution.","The security properties affected are confidentiality, integrity, and availability.",The severity of this threat is high as it can lead to various types of attacks and compromise the security of the system.,The likelihood of this threat is also high as it is a common vulnerability that can be easily exploited by attackers.,The relevant assets are the web server and any data or systems that are accessible through it.,The attack vector is through the URL or similar request that is sent to the web server.,"The attacker can be anyone with the ability to send a request to the web server, including external attackers and insiders.","The attacker's motive can vary depending on the type of attack they are attempting to carry out, but it can include stealing sensitive data, gaining unauthorized access, or causing disruption to the system.","The relevant cyber controls/countermeasures include implementing proper input validation and verification, using secure coding practices, and implementing access controls to limit the ability of attackers to send requests to the web server.","Detection methods include monitoring for unusual or suspicious requests, implementing intrusion detection systems (IDS), and conducting regular vulnerability assessments and penetration testing.",918
